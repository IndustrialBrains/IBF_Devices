<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_ManualController" Id="{791f33e7-9b25-0d7d-213d-2739874fa7e2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ManualController
VAR
	stHMI				: UDT_HMI_ManualControl; // Link between FB and HMI
	
	nNumberOfDevices	: UDINT := 0; // Number of devices in DeviceArray
	nSelectedDevicePrev : UDINT := 0; // Previously selected device in HMI (array index)
 
	fbNodevice			: FB_DevBase; // Dummy to make all pointers point to a valid device
	stNoDevice			: UDT_DeviceID := (sName := 'No device', sType := TO_STRING(E_Devices.Undefined), pFunction := ADR(fbNodevice)); 

	arDeviceArray		: ARRAY [0..GVL_DevManual.nMAXDEVCOUNT] OF UDT_DeviceID := [stNoDevice];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GVL_DevManual.bManualModeActive := stHMI.bEnabled;

IF stHMI.bEnabled THEN
	// NOTE: The device is responsibe for disabling the manual mode when CmdManual is no longer called
	stHMI.refSelectedDevice.CmdManual();
END_IF

IF stHMI.nSelectedDevice <> nSelectedDevicePrev THEN // User changed device selection in the HMI
	// Get a reference to the selected device	
	stHMI.refSelectedDevice REF= arDeviceArray[stHMI.nSelectedDevice].pFunction^;
	
	// Remember previous selection
	nSelectedDevicePrev := stHMI.nSelectedDevice;

	// Update HMI frame (contains device specific manual controls)  
	CASE stHMI.refSelectedDevice.eDevType OF
		E_Devices.Valve:
			stHMI.pDevValve 			:= ADR(stHMI.refSelectedDevice);
		E_Devices.Cylinder:
			stHMI.pDevCylinder			:= ADR(stHMI.refSelectedDevice);
		E_Devices.Axis:
			stHMI.pDevAxis				:= ADR(stHMI.refSelectedDevice);
		E_Devices.PushButtonLight:
			stHMI.pDevPBL				:= ADR(stHMI.refSelectedDevice);
		E_Devices.DigitalSensor:
			stHMI.pDevDigitalInput		:= ADR(stHMI.refSelectedDevice);
		E_Devices.AnalogSensor:
			stHMI.pDevAnalogInput 		:= ADR(stHMI.refSelectedDevice);
		E_Devices.DigitalOut:
			stHMI.pDevDigitalOut		:= ADR(stHMI.refSelectedDevice);
		E_Devices.AnalogOut:
			stHMI.pDevAnalogOut			:= ADR(stHMI.refSelectedDevice);
		E_Devices.PWMController:
			stHMI.pDevPWMController		:= ADR(stHMI.refSelectedDevice);
		E_Devices.DoublePWMController:
			stHMI.pDevDoublePWM			:= ADR(stHMI.refSelectedDevice);
		E_Devices.Encoder:
			stHMI.pDevEncoder			:= ADR(stHMI.refSelectedDevice);
		E_Devices.AnalogAxis:
			stHMI.pDevAnalogAxis		:= ADR(stHMI.refSelectedDevice);
		E_Devices.TwoVelocityAxis:
			stHMI.pDevTwoVelocityAxis 	:= ADR(stHMI.refSelectedDevice);
		E_Devices.KL5151:
			stHMI.pDevKL5151			:= ADR(stHMI.refSelectedDevice);
		E_Devices.KL1512:
			stHMI.pDevKL1512			:= ADR(stHMI.refSelectedDevice);
	END_CASE

END_IF

// Reset device 
IF stHMI.bReset THEN
	stHMI.bReset R= stHMI.refSelectedDevice.CmdReset();
END_IF
]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{003add0f-eb8e-0bc3-313c-a2e164f27b73}" />
    <Folder Name="Public" Id="{77e9735c-4b7d-0116-2c5b-95e5e96a9466}" />
    <Method Name="CmdAddDevice" Id="{0bc99b03-d325-0236-3e6c-84d8051938b0}" FolderPath="Public\">
      <Declaration><![CDATA[METHOD PUBLIC CmdAddDevice : BOOL
VAR_INPUT
	refToDevice	: REFERENCE TO FB_DevBase ;
END_VAR
VAR
	bDevAdded : BOOL ;
	i : UDINT; // Iterator
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if device is not already in the array 
FOR i:= 0 TO nNumberOfDevices DO 
	IF arDeviceArray[i].sName = refToDevice.sName THEN 
		bDevAdded := TRUE ;
	END_IF 
END_FOR

// If device is not found add device to the list
IF NOT bDevAdded THEN 
	nNumberOfDevices := LIMIT(0, nNumberOfDevices + 1 ,GVL_DevManual.nMAXDEVCOUNT)	;
	arDeviceArray[nNumberOfDevices].sType 		:= TO_STRING(refToDevice.eDevType)	;
	arDeviceArray[nNumberOfDevices].sName		:= refToDevice.sName	;
	arDeviceArray[nNumberOfDevices].pFunction 	:= ADR(refToDevice)		;	
	bDevAdded := TRUE ;
END_IF

GVL_DevManual.nGlobalNumberOfDevices := nNumberOfDevices ;
CmdAddDevice := bDevAdded ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f8d4c384-b515-0887-3458-fc0269608267}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Assure stHMI always has valid references
stHMI.refSelectedDevice REF= THIS^.fbNodevice;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>