<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_DevHDAnalogInput" Id="{17595e23-620c-00d9-1a3c-cd0af05163c6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC FB_DevHDAnalogInput EXTENDS FB_DevBase
VAR_INPUT
	bCmdSimulate	: BOOL 	:= FALSE ;// Simulate sensor Input 
	fSimValue		: DINT	:= 0 ;// Simulated sensor state
END_VAR
VAR_OUTPUT
	fValue	: LREAL := 0 ; // Analog input value (LREAL)
END_VAR
VAR
	nLimitMin			: DINT := IBF_Utilities.GVL_FixedValues.nDINTMINVALUE	; // Initial value is set to integer minimum value for use with normal def analog inputs 
	nLimitMax 			: DINT := IBF_Utilities.GVL_FixedValues.nDINTMAXVALUE 	; // Initial value is set to integer minimum value for use with high def analog inputs
	inHwInput 	AT%I* 	: DINT ; // Hardware connection
	inStatus	AT%I* 	: BYTE; // input card hardware status
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Set device type
eDevType := E_Devices.AnalogSensor ;

// Call base function
SUPER^(refFbFault := refFbFault);

// Check Hardware connection
CheckHardware();

// set feedback
ExecSetFeedback();]]></ST>
    </Implementation>
    <Method Name="CheckHardware" Id="{de66372f-1f59-079d-284f-b942f3a56b98}">
      <Declaration><![CDATA[METHOD CheckHardware : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check for hardware faults
IF inStatus.0 THEN // signal under range
	stFault.Active			:= TRUE 							;
	stFault.MessageNumber	:= E_MessageNumbers.CF_FeedbackFault 	;
	stFault.Description		:= CONCAT( sName, 'Signal under Range' )	;
	stFault.FaultType		:= E_FaultTypes.CF 					;
	bErrorActive			:= TRUE 							;
END_IF

IF inStatus.1 THEN // signal over range
	stFault.Active			:= TRUE 							;
	stFault.MessageNumber	:= E_MessageNumbers.CF_FeedbackFault 	;
	stFault.Description		:= CONCAT( sName, 'Signal over Range' )	;
	stFault.FaultType		:= E_FaultTypes.CF 					;
	bErrorActive			:= TRUE 							;
END_IF

IF inStatus.6 THEN // general Error bit
	stFault.Active			:= TRUE 							;
	stFault.MessageNumber	:= E_MessageNumbers.FF_Unknown 	;
	stFault.Description		:= CONCAT( sName, 'Hardware General Error' )	;
	stFault.FaultType		:= E_FaultTypes.FF 					;
	bErrorActive			:= TRUE 							;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetFeedback" Id="{e186a48a-464f-020c-23e9-d266b6ce2852}">
      <Declaration><![CDATA[METHOD ExecSetFeedback : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bCmdSimulate THEN 
	fValue := fSimValue ;
ELSE
	fValue := DINT_TO_LREAL(inHwInput);
END_IF

ExecSetFeedback := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{89115260-2041-0458-044d-7546366459ec}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
	// Location data for messages  
	nId			: UDINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Set init to true =====
	bInitOk	:= TRUE ; 

// ====== Calculate device id =====
	bInitOk :=	ExecIdentifyDevice(nId,nParentId, E_ComponentTypes.AnInput) AND bInitOk;

// ====== Set feedback =====
	Init := bInitOk ;	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>