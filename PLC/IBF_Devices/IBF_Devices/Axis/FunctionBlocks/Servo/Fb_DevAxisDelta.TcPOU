<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Fb_DevAxisDelta" Id="{63a8c96e-3fc0-001c-2116-24486a7558ba}" SpecialFunc="None">
    <Declaration><![CDATA[// Delta ASDA-A2 servo
FUNCTION_BLOCK Fb_DevAxisDelta EXTENDS Fb_DevAxis
VAR
	fbFormatString : FB_FormatString;
    fbCoERead	: FB_CoERead;
	dwErrorCode	: DWORD; // See ASDA A2-E EtherCAT Interface Servo Drive User Manual, chapter 9.2 Error Code Table
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

// Continously check drive error code
fbCoERead(
    NetId          := '', 
    Index          := 16#603F, // ASDA2 Error Code
    SubIndex       := 0, 
    pDstBuf        := ADR(dwErrorCode), 
    BufLen         := SIZEOF(dwErrorCode), 
    Execute        := NOT fbCoERead.Busy,
    Timeout        := T#5S, 
    CompleteAccess := FALSE, 
    Axis           := AxisRef
);

IF (dwErrorCode <> 0)
	AND (dwErrorCode <> 16#9000) // Ignore STO errors (already handled by fbDevAxis)
THEN
	stFault.Active := TRUE;
	stFault.FaultType := E_FaultTypes.CF;
	
	// Custom fault descriptions for some common errors
	IF (dwErrorCode = 16#2310) THEN // AL001
		stFault.Description := 'Motor overcurrent';
	ELSIF (dwErrorCode = 16#7305) THEN // AL011
		stFault.Description := 'Encoder error';
	ELSIF (dwErrorCode = 16#7121) THEN // AL030
		stFault.Description := 'Motor protection error (possible overload)';
	ELSIF (dwErrorCode = 16#3300) THEN // AL031
		stFault.Description := 'U,V,W wiring error';
	ELSE // Not so common error
		fbFormatString(sFormat := 'Delta ASDA-A2 servo error: 0x%X', arg1 := F_DWORD(dwErrorCode), sOut => stFault.Description);
	END_IF
END_IF

]]></ST>
    </Implementation>
    <Folder Name="Command Methods" Id="{6ff04a08-145f-0075-3081-8a253c264400}" />
    <Folder Name="Private" Id="{411a3c08-0cd0-0279-3d64-90e3acd48f7f}">
      <Folder Name="Organization" Id="{3dbff440-0f61-0a96-00dd-248ac60e3867}" />
    </Folder>
    <Method Name="ExecReset" Id="{2608dc0b-c27b-03ab-2a5f-162cf169c209}" FolderPath="Private\Organization\">
      <Declaration><![CDATA[METHOD INTERNAL ExecReset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF AxisRef.Status.Coupled THEN 
	bResetDone 	:= NOT AxisRef.Status.Error;
	bExec_Reset	R= bResetDone  ;
	RETURN;
END_IF

// ===== reset command =====
	bError 		:= AxisRef.Status.Error OR AxisRef.Status.DriveDeviceError; 
	bExec_Reset	R= fbMcReset.Done  ;

// ==== execute reset functions =====
fbMcReset	( 	Execute	:= bExec_Reset,
				Axis	:= AxisRef ); 
				
// ===== Set feedback =====
	bResetDone 	S= fbMcReset.Done  ;
	bResetDone	R= AxisRef.Status.Error ;
	tonResetDone (IN	:= bResetDone);

// ===== reset limitations =====
	bCmdSafeSpeed 	:= FALSE ;

	
// Reset fault handling 
	IF fbMcReset.Error THEN 
		bError					:= TRUE							;
		stFault.Active 			:= TRUE 						;
		stFault.Description		:= CONCAT('Reset Fault ', UDINT_TO_STRING(fbMcReset.ErrorID));
		stFault.FaultType		:= E_FaultTypes.FF				;
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{2b37d305-8771-08f4-26c5-28ec9072ede6}" FolderPath="Command Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
	// Message location data
	nId			: UINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)
	
	// Config Bits
	bIcfCmdVelocityRpm	: BOOL := FALSE ; // input speeds in Rpm
	bIcfEnableForward 	: BOOL := TRUE 	; // Enable forward motion
	bIcfEnableReverse	: BOOL := TRUE 	; // Enable reverse motion
	bIcfAlwaysEnable	: BOOL := FALSE ; // 1 = Axis always enabled, 0 = Axis disabled at Idle 
	bIcfModuloAxis		: BOOL := FALSE ; // Show axis position as modulo
	bIcfSTOPresent		: BOOL := FALSE ; // Axis safe torque off is present
	bIcfNCHomeSensor	: BOOL := FALSE ; // Homing sensor is inverted (NC)	
	// Config Values 
	mcHomingMode 		: MC_HomingMode := MC_HomingMode.MC_DefaultHoming; 
	fSafeOverride		: LREAL := 10	; // Safe velocity override [%]
	nEncTurnoverVal 	: LREAL := 360	; // encoder turnover value 
	tEnableDelay		: time 	:= T#0MS; // Time between axis enable command and motion command execution (0 := no delay active)	
	tDisabledelay		: TIME 	:= T#100MS; // Axis idle time before axis is disabled 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Calculate device id =====
	bInitOk :=	ExecIdentifyDevice(nId,nParentId, E_ComponentTypes.Axis) AND bInitOk;

// ====== Set manual device type ======
	eDevType := E_Devices.Axis ;	
	
// ===== Configure Axis =====
	// ***** Config Bits *****
		THIS^.bIcfCmdVelocityRpm	:= bIcfCmdVelocityRpm	; // Enable speed inputs in Rpm
		THIS^.bIcfEnableForward 	:= bIcfEnableForward 	; // Enable forward motion
		THIS^.bIcfEnableReverse		:= bIcfEnableReverse	; // Enable reverse motion
		THIS^.bIcfAlwaysEnable		:= bIcfAlwaysEnable		; // Always enable motor and brake if safety is ok
		THIS^.bIcfModuloAxis		:= bIcfModuloAxis		; // show axis position as modulo
		THIS^.bIcfSTOPresent		:= bIcfSTOPresent		; // Axis has safe torque off function
		THIS^.bIcfNCHomeSensor		:= bIcfNCHomeSensor		; // Axis homing sensor is NC	
	// ***** config homing Mode ***** 
 		THIS^.mcHomingMode 			:= mcHomingMode ; // set homing mode
	// ***** Velocity settings *****
		THIS^.fSafeOverride			:= fSafeOverride	; 	
	// ***** Encoder values *****
		THIS^.fEncoderTurnoverValue := nEncTurnoverVal	; // turnover value for encoder = 25.6 mm per rev * 4096 revolutions 
	// ***** Time delay enable off *****
		THIS^.tEnableDelay		:= tEnableDelay	;
		THIS^.tDisableDelay 	:= tDisabledelay ;		
		
// ===== configure parameters =====
	ParHomeOffset.fMinimum 		:= -1E7;
	ParHomeOffset.fMaximum		:= 1E7;
	ParHomeOffset.nNumber 		:= stIdentity.nLocationId + 1;
	ParHomeOffset.sDiscription  := CONCAT( STR1 := stIdentity.sName, STR2 := ' home position offset');
	ParHomeOffset.sName			:= CONCAT( STR1 := stIdentity.sName, STR2 := ' Home position offset');
	ParHomeOffset.sType			:= 'Cpar';
	ParHomeOffset.sUnit			:= 'unit';
	refFbParHandler.CmdAddParameter( refParameter := ParHomeOffset );

// ===== reset axis state indicators ======
	bError 	:= FALSE;

// ====== Set init to done =======
	bInitOk := TRUE;
	Init := bInitOk;	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>