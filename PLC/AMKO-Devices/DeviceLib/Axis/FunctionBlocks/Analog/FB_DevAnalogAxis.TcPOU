<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_DevAnalogAxis" Id="{2d577320-0726-040c-269d-52c0e83d50e7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_DevAnalogAxis EXTENDS FB_DevBase
VAR_INPUT
	stManualCtrl 	: ST_ManualAnalogAxisCtrl ; // Manual control
END_VAR
VAR_OUTPUT
	bDriveOk		: BOOL ; // Drive is ok
	bMovingCW		: BOOL ; // Move CW output is active
	bMovingCCW		: BOOL ; // Move CCW output is active
	fActVelocity	: LREAL; // Command velocity of motor
END_VAR
VAR // internal functions 
	fbVelocity		: FB_DevAnalogOutputScaled 	;
	fbqRun			: FB_DevDigitalOutput		;
	fbqReset		: FB_DevDigitalOutput		;
	fbqReverse		: FB_DevDigitalOutput		;
	fbiEnabled		: Fb_DevDigitalInput		;
END_VAR
VAR // Internal commands
	fCmdVelocity	: LREAL;
	bCmdRunCW 		: BOOL ;
	bCmdRunCCW		: BOOL ;
	bCmdReset		: BOOL ;	 
	bInternalEnable : BOOL ;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(refFbFault := refFbFault);

// ===== Check inputs =====
	fbiEnabled( bEmbeded	:= TRUE,
				refFbFault 	:= refFbFault);

IF bInitOk THEN 
	ExecSetOutputs() ;
	bDriveOk	:= fbiEnabled.bFcoInputActive ;
END_IF

]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{25bd60d6-a0c4-006b-1e1e-40f55b890b42}" />
    <Folder Name="Private" Id="{a644719c-3261-0f8c-3b05-3c6242d33819}" />
    <Method Name="CmdManual" Id="{d526230f-e04e-08a3-0a52-d542f08f92a4}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdManual := TRUE ;

// Execute Manual commands
	IF stManualCtrl.bCmdRunCW THEN 
		CmdRunCW(fCmdVelocity := stManualCtrl.fCmdVelocity);
	ELSIF stManualCtrl.bCmdRunCCW THEN 
		CmdRunCCW(fCmdVelocity := stManualCtrl.fCmdVelocity);
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdRunCCW" Id="{e92c1c28-51a1-0de5-0174-155a52f08ed3}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdRunCCW : BOOL
VAR_INPUT
	fCmdVelocity	: LREAL ; // Command velocity
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdRunCCW			:= TRUE ;
THIS^.fCmdVelocity 	:= fCmdVelocity ; 

CmdRunCCW 	:= bMovingCW ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdRunCW" Id="{e890e9f0-dd77-0270-3233-14c16580ad18}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdRunCW : BOOL
VAR_INPUT
	fCmdVelocity	: LREAL ; // Command velocity
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdRunCW := TRUE ;
THIS^.fCmdVelocity 	:= fCmdVelocity ;

CmdRunCW 	:= bMovingCW ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSafeStop" Id="{c1b9e61f-17d6-00f9-1428-4bb1000131d5}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdSafeStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bIsSafe := TRUE ;

bIsSafe := fbVelocity.CmdSafeStop() AND bIsSafe ;
bIsSafe := fbqRun.CmdSafeStop() 	AND bIsSafe ;
bIsSafe := fbqReverse.CmdSafeStop() AND bIsSafe ;
bIsSafe := fbqReset.CmdSafeStop() 	AND bIsSafe ;

CmdSafeStop := bIsSafe;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetOutputs" Id="{73c3f618-cb9e-0650-0e12-802c6dbad778}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSetOutputs : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Check safety and enable ======
IF bSafetyOk 
AND fbiEnabled.bFcoInputActive 
AND (bEnable OR bManual) THEN 
	bInternalEnable := TRUE;
ELSE
	fCmdVelocity 	:= 0;
	bCmdRunCW		:= FALSE;
	bCmdRunCCW		:= FALSE;
END_IF 

// ====== Set outputs =======
	fbVelocity	(	bEmbeded 	:= TRUE,
					bSafetyOk	:= bSafetyOk,
					bEnable		:= bInternalEnable,
					fCmdValue	:= fCmdVelocity, 
					refFbFault	:= refFbFault);
				
	fbqRun		(	bEmbeded 	:= TRUE,
					bSafetyOk	:= bSafetyOk,
					bEnable		:= bInternalEnable,
					bCmdOn		:= bCmdRunCW OR bCmdRunCCW,
					refFbFault	:= refFbFault);
				
	fbqReverse	(	bEmbeded 	:= TRUE,
					bSafetyOk	:= bSafetyOk,
					bEnable		:= bInternalEnable,
					bCmdOn		:= bCmdRunCCW,
					refFbFault	:= refFbFault);

	fbqReset	(	bEmbeded 	:= TRUE,
					bSafetyOk	:= bSafetyOk,
					bEnable		:= bInternalEnable,
					bCmdOn		:= bCmdReset,
					refFbFault	:= refFbFault);

// ===== reset input commands =====
	fCmdVelocity 	:= 0;
	bCmdRunCW		:= FALSE;
	bCmdRunCCW		:= FALSE;
	bCmdManual		:= false;
	bInternalEnable := FALSE;
// ===== set feedback =====

bMovingCW		:= fbqRun.bOutputState AND NOT fbqReverse.bOutputState;
bMovingCCW		:= fbqRun.bOutputState AND fbqReverse.bOutputState;
fActVelocity	:= fbVelocity.fOutputValue ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{1d9ecc1b-c37a-0e07-3bc6-88c35083f504}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR_INPUT
	// Message location data
	nId			: UDINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)

	// Motor settings
	fMaxVelocity : LREAL ; // Maximum motor velocity for scaling
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Calculate device id =====
	ExecIdentifyDevice(nId,nParentId, E_ComponentTypes.Axis);

// ====== Set manual device type ======
	eDevType := E_Devices.AnalogAxis ;	

// ====== initialize components =====
bInitOk := TRUE ;

bInitOk := 	fbVelocity.Init	( 	nId 			:= 0,
								nParentId		:= nLocationId,
								benableNegative	:= FALSE )
								AND bInitOk;
			fbVelocity.SetScaling	(fMaxValue 		:= fMaxVelocity);
								
bInitOk	:= 	fbqRun.Init		( 	nId				:= 1,
								nParentId		:= nLocationId)
								AND bInitOk;

bInitOk	:= 	fbqReset.Init	( 	nId				:= 2,
								nParentId		:= nLocationId)
								AND bInitOk;

bInitOk	:= 	fbqReverse.Init	( 	nId				:= 3,
								nParentId		:= nLocationId)
								AND bInitOk;

bInitOk	:= 	fbiEnabled.Init	( 	nId				:= 4,
								nParentId		:= nLocationId)
								AND bInitOk;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>