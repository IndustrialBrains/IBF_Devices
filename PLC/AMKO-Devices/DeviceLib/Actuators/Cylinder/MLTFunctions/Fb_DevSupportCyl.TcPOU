<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="Fb_DevSupportCyl" Id="{6f79fb02-e31e-4a90-b3f7-c5099f5ae08a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC Fb_DevSupportCyl EXTENDS Fb_DevCylWithFbk
VAR_INPUT
	// Traverse data
	stTraverseAxisRef	: AXIS_REF 			; // Axis reference
	nHandCartPos		: LREAL 			; // Position of hand cart
	tMindownTime		: TIME	:= T#1S		; // minimum time down before it can go up again 
END_VAR
VAR_OUTPUT
	bStopAll			: BOOL := TRUE 	; // Support fault stop all motions 
	// feedback 
	bSupportOk			: BOOL := FALSE 	; // Support is running ok
	 
END_VAR
VAR
	bCmdSupportDown		: BOOL 	:= FALSE 	; // External command to move support down 
	// Support data
	nSupportPosition	: LREAL := 0 		; // possition of support cylinder in reference to the home position 
	nSupportWidth		: LREAL := 100		; // width of support cylinder 
	// Traverse data 
	nTravMaxAcc				: LREAL ; // traverse maximum acceleration 
	nTravMaxDec				: LREAL ; // traverse maximum deceleration 
	nTraverseLength			: LREAL	:= 550		; // Length of sewing head Traverse 
	nTraverseFlagPosition	: LREAL	:= 0		; // position of flag in reference to edge of Traverse 
	
	// handcart data
	nHandCartLength			: LREAL := 100	; // Length of hand cart 
	nHandCartClearance		: LREAL := 300	; // Clearance around cart in which support is down
	
	// safety values 	
	nMinSafeDistanceDown: LREAL := 200	; // Minimum distance for support to move down

	// Traverse triggers 
	nMinStopDistance 	: 	LREAL 	:= 10		; // Minimum stopping distance required[mm]
	nTriggerDown		: 	LREAL	:= 100		; // trigger distance for support to go down[mm]
	nTriggerUp			: 	LREAL	:= 50 		; // trigger distance for support to move up[mm]
	nTriggerPosDownFw	:	LREAL 	; // trigger position for support to move down when moving forward [mm]
	nTriggerPosCheckDownFw: LREAL 	; // trigger for safety check is cylinder is down when mocing forward [mm]
	nTriggerPosDownRe	: 	LREAL 	; // trigger position for support to move down when moving reverse [mm]
	nTriggerPosCheckDownRe: LREAL 	; // trigger for safety check is cylinder is down when mocing reverse [mm]

	nTriggerPosUpFw		: 	LREAL	; // Trigger position for support to move Up [mm]
	nTriggerPosUprev	: 	LREAL	; // Trigger position for support to move Up [mm]
	
	// handcart down positions
	nCartCmdDownHigh	: LREAL ; // hand cart position for cylinder to go down high limit
	nCartCmdDownLow		: LREAL ; // hand cart Position for cylinder to go down low limit 
	
	fbTimerStartup		:	TON		; // Startup time before support down check
	
	// Support down trigger
	bSupportClose 	: BOOL 	; // Support close command
	tonSupportDown 	: TON 	; // support Down command
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitOk THEN
	bStopAll	:= TRUE ; 
	RETURN;
ELSE
	;
END_IF 

// ======= Enable/ disable support cylinder dependent functions =======
	bStopAll := bErrorActive OR bCmdManual OR NOT bEnable ; 	

// ======= Activate cylinder ======	
SUPER^(refFbFault := refFbFault);

// ====== Manual functions =====
	IF bCmdManual THEN 
		bCmdManual		:= FALSE ;	
		RETURN;
	END_IF
	
// ======= Calculate variables =======
	ExecCalc();	

// ======= Support cylinder control =======
	IF bCmdSupportDown THEN 
		CmdClose();
		IF bFco_Closed THEN 
			bCmdSupportDown := FALSE ;
		END_IF
 	ELSE
		ExecCylControl();
	END_IF

	]]></ST>
    </Implementation>
    <Folder Name="Protected" Id="{421606cd-2d03-484f-a3fe-01b3a3ce3658}" />
    <Method Name="ExecCalc" Id="{e4a0b8d4-ce2a-43fe-8059-fe91a0abfe6a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED ExecCalc : BOOL
VAR_INPUT
END_VAR
VAR 
	nTriggerOffset 	: LREAL ;
	nMaxAccelDist	: LREAL ;
	nMaxVelocity	: LREAL ;
	nDecelDist		: LREAL	;
	nTraverseFront		: LREAL ; // front of Traverse distance from sensor flag
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ***** Calculate hardstop distance *****
	nMinStopDistance	:= (ABS(stTraverseAxisRef.NcToPlc.ActVelo) / 2) * (ABS(stTraverseAxisRef.NcToPlc.ActVelo) / nTravMaxDec);
	
// ***** Calculate speed dependant trigger offset *****
	nTriggerOffset := F_TriggerPosOffset( Velocity := ABS(stTraverseAxisRef.NcToPlc.ActVelo), nMoveTimeMs := stTimesClose.Maximum);

// ***** Calculate triggerdistance down *****
	nTriggerDown := (nSupportWidth / 2) + nMinStopDistance + nTriggerOffset;
	IF nTriggerDown < nMinSafeDistanceDown THEN 
		nTriggerDown := nMinSafeDistanceDown ;
	END_IF
	
// ***** Calculate triggerdistance Up *****
	nMaxAccelDist 	:= F_AccDecDistanceFromTime	(nAccelDecel:= nTravMaxAcc, nTimeMs := stTimesClose.Maximum);
	nMaxVelocity	:= F_TopVelocityFromTime	(nAccel 	:= nTravMaxAcc, nTimeMs := stTimesClose.Maximum);
	nDecelDist		:= F_AccDecDistanceFromVelo (nAccDecc	:= nTravMaxDec, nVelocity := nMaxVelocity);
	
	nTriggerUp	:= ((nSupportWidth / 2) + nMaxAccelDist + nDecelDist)* 1.1; // 1.1 is a %10 safety margint to account for cycle time 


// ***** calculate traverse lenght from sensor *****
	nTraverseFront := nTraverseLength - nTraverseFlagPosition ;

	
// ===== Calculate trigger positions =====
	// ***** positive direction positions *****
		nTriggerPosDownFw		:= nSupportPosition - nTriggerDown - nTraverseFront ;
		nTriggerPosCheckDownFw	:= nSupportPosition - (nSupportWidth / 2) - nTraverseFront - nMinStopDistance ; 
		nTriggerPosUpFw			:= nSupportPosition + nTraverseFlagPosition + nTriggerUp;
		
	// ***** negative direction positions *****
		nTriggerPosDownRe 		:= nSupportPosition + nTriggerDown + nTraverseFlagPosition ;
		nTriggerPosCheckDownRe	:= nSupportPosition + (nSupportWidth / 2) + nTraverseFlagPosition + nMinStopDistance; 
		nTriggerPosUprev		:= nSupportPosition - nTraverseFront - nTriggerUp;
	
// ===== calculate hand cart trigger positions ======
	nCartCmdDownHigh 	:= nSupportPosition + nHandCartClearance ;
	nCartCmdDownLow		:= nSupportPosition - nHandCartClearance - nHandCartLength  ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecCylControl" Id="{f8035106-b6b8-4b74-9906-cd11d7163967}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED ExecCylControl : BOOL
VAR
	nTravPos : LREAL ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ===== copy position in temporary var (for readability ) ======
	nTravPos := stTraverseAxisRef.NcToPlc.ActPos ; 

// ===== Trigger Support cylinder =====
	IF nHandCartPos >= nCartCmdDownLow AND nHandCartPos <= nCartCmdDownHigh THEN  
		bSupportClose := TRUE ;
	ELSIF 	stTraverseAxisRef.Status.PositiveDirection 
		AND	nTravPos >= nTriggerPosDownFw 
		AND nTravPos <= nTriggerPosUpFw 
		THEN 
		bSupportClose := TRUE ;
	ELSIF 	stTraverseAxisRef.Status.NegativeDirection  
		AND nTravPos <= nTriggerPosDownRe 
		AND nTravPos >= nTriggerPosUprev 
		THEN 
		bSupportClose := TRUE ;
	ELSIF	nTravPos > nTriggerPosUprev AND nTravPos < nTriggerPosUpFw THEN 
		bSupportClose := TRUE ;
	ELSE
		bSupportClose := FALSE ;
	END_IF

// ===== Run filter timer =====
	tonSupportDown(IN := bFco_Closed, PT := tMindownTime);	

// ===== Set Cylinder command ======
	IF bSupportClose THEN 
		CmdClose() ;
	ELSIF tonSupportDown.Q THEN 
		CmdOpen();
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecFaultHandling" Id="{f30a0b29-5f73-4cbe-a758-2d24f275e1f5}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED ExecFaultHandling : BOOL
VAR
	bEnableCheck: BOOL ; // enable check functions 
	nActPos		: LREAL; // actual position of traverse axis (for readability)	 
	bActMovFwd	: BOOL ; // traverse is moving in positive direction
	bActMovRev	: BOOL ; // traverse is moving in negative direction
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Write axis position to temporary variable to improver readability =======
	nActPos := stTraverseAxisRef.NcToPlc.ActPos ;
	IF stTraverseAxisRef.Status.Moving THEN 
		bActMovFwd := stTraverseAxisRef.Status.PositiveDirection ; 
		bActMovRev := stTraverseAxisRef.Status.NegativeDirection ; 
	ELSE
		bActMovFwd := FALSE ; 
		bActMovRev := FALSE ; 
	END_IF
	
// ====== Alway check if cylinder is down when within minimum range ======
	fbTimerStartup(IN := NOT bErrorActive, PT := LREAL_TO_TIME(stParTimeToClose.fValue));
	
	IF fbTimerStartup.Q 
	AND	nActPos > nTriggerPosUprev 
	AND nActPos < nTriggerPosUpFw 
	AND NOT fbSensorClosed.bFcoInputActive  THEN 	
		// Set error to active (stop traverse axis) 
		bErrorActive := TRUE ;
		// add message data
		stFault.Active			:= TRUE 								;
		stFault.Discription		:= 'support not in safe (down) position';
		stFault.MessageNumber	:= E_MessageNumbers.FF_Collision 		;
		stFault.FaultType		:= E_FaultTypes.FF				;
		refFbFault.CmdAddFault( stFault );
	END_IF

// ====== Make sure support Moves down ======
	IF bActMovFwd 
	AND nActPos > nTriggerPosCheckDownFw 
	AND nActPos < nTriggerPosUpFw 
	AND NOT fbSensorClosed.bFcoInputActive THEN 
		// Set error to active (stop traverse axis) 
		bErrorActive := TRUE ;
		// add message data
		stFault.Active			:= TRUE 								;
		stFault.Discription		:= 'Emergency stop support cylinder not down';
		stFault.MessageNumber	:= E_MessageNumbers.FF_Collision 		;
		stFault.FaultType		:= E_FaultTypes.FF				;
		refFbFault.CmdAddFault( stFault );
	ELSIF bActMovRev 
	AND nActPos > nTriggerPosUprev
	AND nActPos < nTriggerPosCheckDownRe 
	AND NOT fbSensorClosed.bFcoInputActive THEN 
		// Set error to active (stop traverse axis) 
		bErrorActive := TRUE ;
		// add message data
		stFault.Active			:= TRUE 								;
		stFault.Discription		:= 'Emergency stop support cylinder not down';
		stFault.MessageNumber	:= E_MessageNumbers.FF_Collision 		;
		stFault.FaultType		:= E_FaultTypes.FF				;
		refFbFault.CmdAddFault( stFault );
 	END_IF	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init_Support" Id="{df078b29-0040-4cbe-9b1f-d5f4e42084dc}">
      <Declaration><![CDATA[METHOD Init_Support : BOOL
VAR_INPUT
	sInValveName		: STRING			:= 'valve'	; // Name of the cylinder ( used for fault handling and identification)
	nInValveNumber		: UDINT				:= 0		; // Cylinder identification number
	// Support data
	nInSupportPosition	: LREAL := 0 		; // possition of support cylinder in reference to the home position 
	nInSupportWidth		: LREAL := 100		; // width of support cylinder 
	// Traverse data 
	nInTravMaxAcc			: LREAL ; // traverse maximum acceleration 
	nInTravMaxDec			: LREAL ; // traverse maximum deceleration 
	nInTraverseLength		: LREAL	:= 550		; // Length of sewing head cart 
	nInTraverseFlagPosition	: LREAL	:= 0		; // position of flag in reference to edge of cart 
	// cart data
	nInHandCartLenght		: LREAL := 250		; // hand cart length [mm]
	nInHandCartClearance	: LREAL := 300		; // Clearance around cart in which support is down

	// safety values 	
	nInMinSafeDistanceDown: LREAL := 200		; // Minimum distance for support to move down
	// Command state
	eResetState		: E_ValveResetState := 0		; // Cylinder reset state variable (default is idle) 
	eSafeState		: E_ValveResetState	:= 0		; // Valve safe state
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== initi valve ======
	SUPER^.Init(nInValveNumber, eResetState, eSafeState);
	
// ====== Set support data =======
	nSupportPosition 	:= nInSupportPosition 	;
	nSupportWidth		:= nInSupportWidth 		;

// ====== Set traverse Data ======
	nTravMaxAcc				:= nInTravMaxAcc			;
	nTravMaxDec				:= nInTravMaxDec			;
	nTraverseLength 		:= nInTraverseLength		;
	nTraverseFlagPosition	:= nInTraverseFlagPosition 	;
	nMinSafeDistanceDown	:= nInMinSafeDistanceDown	;

// ===== set handcart data =====
	nHandCartLength 		:= nInHandCartLenght 		;
	nHandCartClearance		:= nInHandCartClearance		;

// ====== set feedback to true (support always has feedback) =======
	bIcfFbkClosedPresent 	:= TRUE ;
	bIcfFbkOpenPresent		:= TRUE ;
	
// ====== Check if init is done ======
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Mod_ManualControl" Id="{4b24c4ba-2a0f-4840-b6ea-d17769236f0a}">
      <Declaration><![CDATA[METHOD PUBLIC Mod_ManualControl : BOOL
VAR_INPUT
	eCmdCylinder : E_CylinderCmd ; // cylinder manual command	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdManual := TRUE ;

CASE eCmdCylinder OF
	E_CylinderCmd.Cyl_Reset:
		CmdReset();
	E_CylinderCmd.Cyl_Hold:
		CmdHold();
	E_CylinderCmd.Cyl_Teach:
		CmdTeach();
	E_CylinderCmd.Cyl_Calculate:
		ExecCalc();
	E_CylinderCmd.Cyl_Expand:
		CmdOpen();
	E_CylinderCmd.Cyl_Retract:
		CmdClose();
	ELSE 
		RETURN;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Mod_SupportDown" Id="{06184fbf-2cbe-4411-af17-f02b20d0d678}">
      <Declaration><![CDATA[METHOD Mod_SupportDown : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdSupportDown := true ;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Fb_DevSupportCyl">
      <LineId Id="453" Count="10" />
      <LineId Id="539" Count="0" />
      <LineId Id="465" Count="19" />
      <LineId Id="206" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.ExecCalc">
      <LineId Id="7" Count="2" />
      <LineId Id="27" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="15" Count="4" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="41" Count="6" />
      <LineId Id="55" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="66" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.ExecCylControl">
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="81" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.ExecFaultHandling">
      <LineId Id="170" Count="19" />
      <LineId Id="191" Count="2" />
      <LineId Id="251" Count="1" />
      <LineId Id="198" Count="9" />
      <LineId Id="209" Count="2" />
      <LineId Id="253" Count="1" />
      <LineId Id="216" Count="6" />
      <LineId Id="224" Count="2" />
      <LineId Id="255" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.Init_Support">
      <LineId Id="195" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="103" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="115" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="107" Count="2" />
      <LineId Id="60" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="171" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.Mod_ManualControl">
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="7" Count="0" />
      <LineId Id="28" Count="6" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="Fb_DevSupportCyl.Mod_SupportDown">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>