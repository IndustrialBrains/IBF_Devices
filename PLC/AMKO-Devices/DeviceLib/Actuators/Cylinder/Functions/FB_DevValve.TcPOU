<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_DevValve" Id="{ba396402-0ac8-4d5d-a8f4-911b90a2c3dc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_DevValve EXTENDS FB_DevBase
VAR_INPUT
	// Manual control 
	stManualCtrl	: UDT_ManualValveControl ;
END_VAR
VAR_OUTPUT
	// ===== Status indicators =======
	bFco_Closed		:	BOOL := FALSE ;
	bFco_Open		: 	BOOL := FALSE ;
END_VAR
VAR
	// Pararmeters
		stParTimeToClose	: Udt_Parameter := (fValue := 50) ; // time to close parameter
		stParTimeToOpen		: Udt_Parameter	:= (fValue := 50) ; // Time to open parameter
	// Hardware links 
		q_Open			AT %Q* : BOOL := FALSE 	; // Open valve
		q_Close 		AT %Q* : BOOL := FALSE	; // Close valve
	// Internal commands
		bCmdClose 	: BOOL := FALSE ; // close valve 
		bCmdOpen	: BOOL := FALSE ; // Open valve
		bCmdHold	: BOOL := FALSE ; // Hold valve status change
	// Time functions 
		fbTOnClose	: TON	; // Timer for valve close
		FbTOnOpen	: TON 	; // Timer for valve Open
		fbTimerSwitchDir: TON ; // Time for teach function switch direction 
	// reset and safe state
		eResetState		: E_ValveResetState := 0		; // Cylinder reset state variable (default is idle) 
		eSafeState		: E_ValveResetState	:= 0		; // Valve safe state
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// set device type
IF eDevType = E_Devices.Undefined THEN 
	eDevType := E_Devices.Valve ;
END_IF

// Call base function
	SUPER^(refFbFault := refFbFault);

// ===== hold all actions if not initialized ======
IF NOT bInitOk THEN
	RETURN;
END_IF 

// ====== Set Outputs =======
	ExecSetOutPuts();

// ===== collect feedback ======
	ExecSetFeedback();
	
]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{2dd80cd9-fe6b-4d89-aae3-48132b1585a9}" />
    <Method Name="CmdClose" Id="{a782a9c4-fe6c-4821-bc15-4a5b2458d528}">
      <Declaration><![CDATA[METHOD PUBLIC CmdClose : BOOL // close valve or retract cylinder
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Set close command if enabled ======
	bCmdClose 	:= TRUE	;		
	bCmdOpen 	:= FALSE;
	
// ===== Set feedback ======
	CmdClose := bFco_Closed ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdHold" Id="{af07192d-9229-4e2b-8dd0-febfb84d4f3e}">
      <Declaration><![CDATA[METHOD PUBLIC CmdHold : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== set hold command =====
	bCmdHold := TRUE ;

CmdHold := bBlockedCommand ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdManual" Id="{e0148156-b539-4a27-871c-4550f6ffb60a}">
      <Declaration><![CDATA[METHOD PUBLIC CmdManual : BOOL
VAR_IN_OUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Enable manual commands
bCmdManual S= TRUE ;

// execute manual command 
	IF stManualCtrl.bCmdOpen THEN 
		CmdOpen();
	ELSIF stManualCtrl.bCmdClose THEN 
	 	CmdClose(); 
	ELSIF stManualCtrl.bCmdTeach THEN
		CmdTeach ();
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdOpen" Id="{54b61d17-85d8-43fc-a979-9c7d65147693}">
      <Declaration><![CDATA[METHOD PUBLIC CmdOpen : BOOL // Open valve or retract cylinder
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Set open command if enabled ======
	bCmdClose 	:= FALSE;		
	bCmdOpen 	:= TRUE	;
	
// ===== Set feedback ======
	CmdOpen := bFco_Open ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdReset" Id="{f243310c-6787-45be-b839-74681681062f}">
      <Declaration><![CDATA[METHOD PUBLIC CmdReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Set outputs according to reset state =======
	IF bEnable THEN 
		CASE eResetState OF 
			E_ValveResetState.Res_Idle:
				bCmdClose 	:= FALSE;		
				bCmdOpen 	:= FALSE;
			E_ValveResetState.Res_Closed:
				bCmdClose 	:= TRUE	;		
				bCmdOpen 	:= FALSE;
			E_ValveResetState.Res_Open:
				bCmdClose 	:= FALSE;		
				bCmdOpen 	:= TRUE	;
		ELSE
			;
		END_CASE
	END_IF
// ======= Reset Error bit ======
	bErrorActive 	:= FALSE;
	bBussy			:= FALSE;
	
// ======= set feedback =======
	CmdReset := TRUE ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSafeStop" Id="{e95074f6-7b45-0ac3-1b01-bd35092d95b2}">
      <Declaration><![CDATA[METHOD PUBLIC CmdSafeStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSafeState OF 
	E_ValveResetState.Res_Idle:
		bIsSafe := bFco_Closed OR bFco_Open ;
	E_ValveResetState.Res_Closed:
		bIsSafe := bFco_Closed ;
	E_ValveResetState.Res_Open:
		bIsSafe := bFco_Open ;
END_CASE

CmdSafeStop := bIsSafe OR NOT bInitOk ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdTeach" Id="{3f2593c7-29ea-0862-082c-1fa6f192418d}">
      <Declaration><![CDATA[METHOD PUBLIC CmdTeach : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== teach cylinder from hardware inputs ======
	fbTimerSwitchDir(PT:= T#1S); 
// ===== Start test loop =====
IF bFco_Closed AND fbTimerSwitchDir.Q THEN
	bCmdClose 			:= FALSE;
	bCmdOpen 			:= TRUE ;
	fbTimerSwitchDir.IN	:= FALSE; 
ELSIF bFco_Open AND fbTimerSwitchDir.Q THEN
	bCmdClose 			:= TRUE ;
	bCmdOpen 			:= FALSE;
	fbTimerSwitchDir.IN	:= FALSE; 
ELSIF NOT bCmdClose AND NOT bCmdOpen THEN 
	bCmdClose 			:= TRUE ;
	bCmdOpen 			:= FALSE;
END_IF

// ====== start timing ========
	IF bCmdClose AND bFco_Closed THEN 
		fbTimerSwitchDir.IN := TRUE 		;
	ELSIF bCmdOpen AND bFco_Open THEN 
		fbTimerSwitchDir.IN := TRUE 		;
	END_IF
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetFeedback" Id="{bec6c7c2-5e23-47f9-8f90-22cbd47ce8f5}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED ExecSetFeedback : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Set timers =======
	fbTOnClose	(PT 	:= LREAL_TO_TIME(stParTimeToClose.fValue))	;
	FbTOnOpen	(PT		:= LREAL_TO_TIME(stParTimeToOpen.fValue))	;

// ====== Set timed feedback ======
	IF q_Close THEN 
		fbTOnClose.IN 	:= TRUE ;
		fbTOnopen.IN 	:= FALSE;
	ELSIF q_Open THEN 
		fbTOnClose.IN 	:= FALSE;
		FbTOnOpen.IN	:= TRUE ;
	ELSE 
		fbTOnClose.IN 	:= FALSE;
		FbTOnOpen.IN	:= FALSE;
	END_IF
	
// ====== set outputs =======
	bFco_Closed := fbTOnClose.Q ;
	bFco_Open	:= FbTOnOpen.Q	;
	bReady		:= bFco_Closed OR bFco_Open ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetOutPuts" Id="{c7a194a0-0cdb-4788-8c09-c5fb927df87c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED ExecSetOutPuts : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ======= Set Outputs according to commands and check safety features =======
IF bSafetyOk THEN
	IF NOT bCmdHold AND (bEnable OR bCmdManual) THEN  
		q_Close	:= bCmdClose;
		q_Open	:= bCmdOpen	;
		bBlockedCommand := FALSE ;
	ELSE
		bBlockedCommand := TRUE ;
	END_IF
ELSE
	CASE eSafeState OF 
		E_ValveResetState.Res_Idle:
			q_Close	:= bFco_Closed;		
			q_Open 	:= bFco_Open;
		E_ValveResetState.Res_Closed:
			q_Close	:= TRUE	;		
			q_Open 	:= FALSE;
		E_ValveResetState.Res_Open:
			q_Close	:= FALSE;		
			q_Open 	:= TRUE	;
	END_CASE
	bCmdClose 	:= bFco_Closed 	;
	bCmdOpen	:= bFco_Open	;
	
END_IF

// Reset manual and hold commands
bCmdHold 	:= FALSE ;
bCmdManual 	:= FALSE ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{b8e244d6-5d8d-4fc7-8d11-89f2fc179f0b}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
	// Messagedata 
	nId			: UDINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)

	// Command state
	eResetState		: E_ValveResetState := 0		; // Cylinder reset state variable (default is idle) 
	eSafeState		: E_ValveResetState	:= 0		; // Valve safe state
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Calculate device id =====
	ExecIdentifyDevice(nId,nParentId);
	
// ====== Set message information =======
	stFault.ComponentType	:= E_ComponentTypes.Cylinder 		;
	
// ====== Set outputs according to reset state =======
	THIS^.eResetState 	:= eResetState 	;
	THIS^.eSafeState	:= eSafeState	;	

	IF bEnable THEN 
		CASE eResetState OF 
			E_ValveResetState.Res_Idle:
				bCmdClose 	:= bFco_Closed	;		
				bCmdOpen 	:= bFco_Open	;
			E_ValveResetState.Res_Closed:
				bCmdClose 	:= TRUE;		
				bCmdOpen 	:= FALSE;
			E_ValveResetState.Res_Open:
				bCmdClose 	:= FALSE;		
				bCmdOpen 	:= TRUE ;
		END_CASE
	END_IF
// ======= Reset Error bit ======
	bErrorActive 	:= FALSE;
	bBussy			:= FALSE;

// ===== Set device type for manual control =====
	eDevType := E_Devices.Valve ;
	
// ===== configure parameters =====
	stParTimeToClose.fMinimum 		:= 0 		;
	stParTimeToClose.fMaximum		:= 60000 	;
	stParTimeToClose.nNumber 		:= nLocationId + 1;
	stParTimeToClose.sDiscription  	:= CONCAT( STR1 := sName, STR2 := 'avarage time it takes for the valve to close in miliseconds');
	stParTimeToClose.sName			:= CONCAT( STR1 := sName, STR2 := 'time to close');
	stParTimeToClose.sType			:= 'CPar';
	stParTimeToClose.sUnit			:= 'ms';

	stParTimeToOpen.fMinimum 		:= 0 		;
	stParTimeToOpen.fMaximum		:= 60000 	;
	stParTimeToOpen.nNumber 		:= nLocationId + 2;
	stParTimeToOpen.sDiscription  	:= CONCAT( STR1 := sName, STR2 := 'avarage time it takes for the valve to open in miliseconds');
	stParTimeToOpen.sName			:= CONCAT( STR1 := sName, STR2 := 'time to open');
	stParTimeToOpen.sType			:= 'CPar';
	stParTimeToOpen.sUnit			:= 'ms';
	
	// add parameters to handler 
	refFbParHandler.CmdAddParameter( refParameter := stParTimeToClose );
	refFbParHandler.CmdAddParameter( refParameter := stParTimeToOpen );
	
// ====== Set init status bit =======
	bInitOk := TRUE ;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DevValve">
      <LineId Id="515" Count="3" />
      <LineId Id="514" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="394" Count="2" />
      <LineId Id="399" Count="0" />
      <LineId Id="401" Count="5" />
      <LineId Id="417" Count="0" />
      <LineId Id="214" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdClose">
      <LineId Id="23" Count="4" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdHold">
      <LineId Id="5" Count="2" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdManual">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="15" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdOpen">
      <LineId Id="29" Count="4" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdReset">
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="28" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="23" Count="3" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="1" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdSafeStop">
      <LineId Id="6" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.CmdTeach">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="62" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.ExecSetFeedback">
      <LineId Id="43" Count="3" />
      <LineId Id="31" Count="11" />
      <LineId Id="25" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="26" Count="1" />
    </LineIds>
    <LineIds Name="FB_DevValve.ExecSetOutPuts">
      <LineId Id="5" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="10" />
      <LineId Id="29" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_DevValve.Init">
      <LineId Id="82" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="10" Count="12" />
      <LineId Id="28" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="64" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="89" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="96" Count="4" />
      <LineId Id="92" Count="0" />
      <LineId Id="127" Count="2" />
      <LineId Id="105" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>