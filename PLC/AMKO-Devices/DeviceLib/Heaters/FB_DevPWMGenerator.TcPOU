<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_DevPWMGenerator" Id="{70704aac-3999-09c6-25fa-8ebc3616cfee}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC FB_DevPWMGenerator EXTENDS FB_DevBase
VAR_INPUT
	nPeriodLength	: DINT	:= 2000 ; // desired PWM cycle time length [ms] 
	nDutyCycle 		: DINT	:= 50 ; // percentage of power [%]
END_VAR
VAR_OUTPUT
END_VAR
VAR
	qbOutput	AT %Q* 	: BOOL 	; // physical output
	bCycleOutput		: BOOL 	; // Cycle output
	tonTimerOn  		: TON 	; // Timer for cycle on
	tofTimerOff			: TOF 	; // timer for cycle off 
	// output commands
	bCmdPWMCycle		: BOOL 	; // run PWM cycle 
	bCmdOn				: BOOL 	; // turn output on permanantly
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Set device type
eDevType := E_Devices.PWMController ;
SUPER^(refFbFault := refFbFault); 

// calculate cycle times 
CalcCycle();
// set outputs
ExecSetOutput(); 

// reset manual enable
bCmdManual := FALSE ;
]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{08e01c1e-5082-0033-3472-3482377f4dd6}" />
    <Method Name="CalcCycle" Id="{cbf4e29a-eff9-01b9-3918-24ddaea066aa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CalcCycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if dutycycle is within limits
nDutyCycle := LIMIT(1,nDutyCycle,100);

// Calculate time on from cycle time
tonTimerOn.PT 	:= DINT_TO_TIME(( nPeriodLength / 100) * nDutyCycle);
tofTimerOff.PT	:= DINT_TO_TIME(( nPeriodLength / 100) * (100 - nDutyCycle));
 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdOutputCycle" Id="{a254380b-2a20-0f6c-2767-2f9ce4fedb30}">
      <Declaration><![CDATA[METHOD PUBLIC CmdOutputCycle : BOOL // start PWM cycle stays on until off command is given
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdPWMCycle 	S= TRUE ;
CmdOutputCycle 	:= bCmdPWMCycle ;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdOutputOff" Id="{e46451e4-c10e-00fd-0bb5-1e1d22008896}">
      <Declaration><![CDATA[METHOD PUBLIC CmdOutputOff : BOOL // turn off output signal completely
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdPWMCycle 	:= FALSE ;
bCmdOn			:= FALSE ;
CmdOutputOff	:= TRUE 	;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdOutputOn" Id="{caef1961-3f30-098e-3847-da1d5a29b0b7}">
      <Declaration><![CDATA[METHOD PUBLIC CmdOutputOn : BOOL // Output stays on until command ends (returns to PWM if active otherwise turns off)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdOn 		S= TRUE ;
CmdOutputOn	:= TRUE ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetOutput" Id="{3351ea9f-e388-06c8-0c1f-55a73a73b029}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSetOutput : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// PWM signal generator
IF bCmdPWMCycle THEN 
	// Run cycle timers 
	tofTimerOff	(IN := tonTimerOn.Q);
	tonTimerOn	(IN := bCycleOutput AND NOT tofTimerOff.Q );
	bCycleOutput := NOT tofTimerOff.Q ;
ELSE
	bCycleOutput := FALSE ;
END_IF

// set output 
IF bSafetyOk AND (bEnable OR bCmdManual) THEN 
	qbOutput := bCycleOutput OR bCmdOn ;
ELSE
	qbOutput := FALSE ;
	RETURN; 
END_IF

// reset continuous on command
bCmdOn := false ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{277eefb3-b176-0843-2ffb-794fc209fa4e}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
	// Location data for messages  
	nId			: UDINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== Calculate device id =====
	ExecIdentifyDevice(nId,nParentId, E_ComponentTypes.Heaters);

// ====== Set feedback ======
	bInitOk := true ;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>