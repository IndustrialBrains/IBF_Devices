<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="Fb_DevCylWithFbk" Id="{4d944a84-dab5-48bc-b450-758ff0ff83b4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC Fb_DevCylWithFbk EXTENDS FB_DevValve
VAR_INPUT
	bIcfFbkOpenPresent 	: BOOL := FALSE ; // Feedback for cylinder open is present 
	bIcfFbkClosedPresent: BOOL := FALSE ; // Feedback for Cylinder closed is present
	bIcfTimeChecked		: BOOL := TRUE 	; // Cylinder timing is checked = default true
	nMargin				: LREAL:= 10	; // % of tollerance in move speed 
END_VAR
VAR_OUTPUT
	// ===== Teach function =======
	bCmdCopyTimeParam 	: BOOL	:= FALSE 	;// Cylinder, Command to higher level copy toucht time to parameters
	bFeClosed			: BOOL 	:= FALSE	; // closed sensor falling edge
	bReClosed			: BOOL 	:= FALSE	; // closed sensor rising edge
	bFeOpen				: BOOL 	:= FALSE 	; // Open sensor falling edge
	bReOpen				: BOOL 	:= FALSE 	; // open sensor rising edge 
	bReOpenSlow         : BOOL  := FALSE    ; // rising edge, opening went too slow
	bReOpenFast         : BOOL  := FALSE    ; // rising edge, opening went too fast
	bReCloseSlow        : BOOL  := FALSE    ; // rising edge, closing went too slow
	bReCloseFast        : BOOL  := FALSE    ; // rising edge, closing went too fast
END_VAR
VAR	
	bFcoCalcDone	: BOOL := FALSE ; // Calculate timers done 
	
	stTimesClose	: Udt_TimerBandwith ; // Timer bandwith for cylinder close
	stTimesOpen		: Udt_TimerBandwith	; // Timer bandwitch for cylinder open 
	
	fbSensorClosed	: Fb_DevDigitalInputFunctions ; // Digital sensor function closed detection
	fbSensorOpen	: Fb_DevDigitalInputFunctions ; // Digital sensor function open detection
	
	fbTimerOpen		: TON ; // Timer for cylinder to open
	fbTimerClose 	: TON ; // Timer for cylinder to close
	fbTimerTeach	: TON ; // timer for teachin cylinder 

	rtCmdWriteParam	: R_TRIG ; // Write parameter rising edge trigger 
	// Simulation
	fbTimerSimOpen 	: TON 	; 
	fbTimerSimClose	: TON 	; 
	
	// Time Cylinder valid 
	bTriggerTimeClose	: BOOL ;
	bTriggerTimeOpen	: BOOL ;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// set device type
	IF eDevType = E_Devices.Undefined THEN 
		eDevType := E_Devices.Cylinder ;
	END_IF

// call base function 
	SUPER^(refFbFault := refFbFault);

// check for device init
	IF NOT bInitOk THEN
		RETURN;
	END_IF 

// ====== Check direction of movement =======
	ExecDirection();
	
// ====== Reset movement indicators =======
	bReOpenSlow  := FALSE;
	bReOpenFast  := FALSE;
	bReCloseSlow := FALSE;
	bReCloseFast := FALSE;

// ====== Check movement speed =======
	ExecTimeout();
	
// ====== Calculate timers =======
	CalcTimers();

]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{a3827919-0a79-428f-9a70-8c1e3fcbad7b}" />
    <Method Name="CalcTimers" Id="{d777a46f-a2e6-426c-b6f6-e27ce1214e62}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CalcTimers : BOOL
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stParTimeToClose.fValue = stTimesClose.Nominal AND stParTimeToOpen.fValue = stTimesOpen.Nominal AND bFcoCalcDone THEN 
	RETURN ;
ELSE
	bFcoCalcDone := FALSE ;
END_IF
 
// ====== Calculate close times ======
	stTimesClose.Nominal 	:= stParTimeToClose.fValue ;
	stTimesClose.Maximum 	:= stParTimeToClose.fValue * (1 + (nMargin / 100));
	stTimesClose.Minimal 	:= stParTimeToClose.fValue * (1 - (nMargin / 100));

// ====== Calculate open times ======
	stTimesOpen.Nominal 	:= stParTimeToOpen.fValue ;
	stTimesOpen.Maximum 	:= stParTimeToOpen.fValue * (1 + (nMargin / 100));
	stTimesOpen.Minimal 	:= stParTimeToOpen.fValue * (1 - (nMargin / 100));
	
// ====== Set feedback =======
	bFcoCalcDone := TRUE ;

// ===== send write parameters command ======	
	rtCmdWriteParam(CLK := bFcoCalcDone);
	bCmdCopyTimeParam := rtCmdWriteParam.Q	;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSimulate" Id="{6e22c863-00b6-4acc-b064-897ffbaba65f}">
      <Declaration><![CDATA[METHOD PUBLIC CmdSimulate : BOOL
VAR_INPUT
	bFbkReverse		: BOOL := FALSE ; 
	tTimeSimOpen	: TIME := T#1S 	;
	tTimeSimClose	: TIME := T#1S 	;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Run timers when cylinder is active 
	fbTimerSimOpen	(IN := q_Open	, PT := tTimeSimOpen);
	fbTimerSimClose	(IN := q_Close	, PT := tTimeSimClose);

// set feedback sensors to simulate
	fbSensorOpen.bCmdSimulate 	:= TRUE ;
	fbSensorClosed.bCmdSimulate := TRUE ;

// set simulated feedback state 
	IF bFbkReverse THEN 
		fbSensorClosed.bSimState:= fbTimerSimOpen.Q 	;
		fbSensorOpen.bSimState	:= fbTimerSimClose.Q 	; 	
	ELSE 
		fbSensorClosed.bSimState:= fbTimerSimClose.Q 	;
		fbSensorOpen.bSimState	:= fbTimerSimOpen.Q 	; 	
	END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdTeach" Id="{91bc0cb5-62eb-4ee0-9533-355dbae1c792}">
      <Declaration><![CDATA[METHOD PUBLIC CmdTeach : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ====== turn off time check function until new calculation cycle =======
	bFcoCalcDone := false ;

// ====== teach cylinder from hardware inputs ======
	fbTimerTeach	(PT:= T#60S);
	fbTimerSwitchDir(PT:= T#1S); 
// ====== time cylinder cycles ======
	// ===== Start test loop =====
	IF bFco_Closed AND fbTimerSwitchDir.Q THEN
		bCmdClose 			:= FALSE;
		bCmdOpen 			:= TRUE ;
		fbTimerSwitchDir.IN	:= FALSE; 
		fbTimerTeach.IN 	:= TRUE ;
	ELSIF bFco_Open AND fbTimerSwitchDir.Q THEN
		bCmdClose 			:= TRUE ;
		bCmdOpen 			:= FALSE;
		fbTimerSwitchDir.IN	:= FALSE; 
		fbTimerTeach.IN 	:= TRUE ;
	ELSIF NOT bCmdClose AND NOT bCmdOpen THEN 
		bCmdClose 			:= TRUE ;
		bCmdOpen 			:= FALSE;
		fbTimerTeach.IN 	:= TRUE ;
	END_IF

// ====== start timing ========
	IF bCmdClose AND bFco_Closed THEN 
		IF fbTimerTeach.IN THEN
			stParTimeToClose.fValue 	:= TIME_TO_LREAL(fbTimerTeach.ET);
		END_IF
		fbTimerSwitchDir.IN := TRUE 		;
		fbTimerTeach.IN 	:= FALSE 		;
	ELSIF bCmdOpen AND bFco_Open THEN 
		IF fbTimerTeach.IN THEN
			stParTimeToOpen.fValue		:= TIME_TO_LREAL(fbTimerTeach.ET);
		END_IF
		fbTimerSwitchDir.IN := TRUE 		;
		fbTimerTeach.IN 	:= FALSE 		;
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecDirection" Id="{7b6b02f6-752b-46a5-bdce-1b0af61f0130}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecDirection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ===== Check direction commands =====
 	IF q_Close AND fbSensorOpen.bReStatus AND NOT q_Open THEN
		stFault.Active			:= TRUE ;
		stFault.MessageNumber	:= E_MessageNumbers.CF_WrongDirection 	;
		stFault.Discription		:= CONCAT( sName,' Cylinder Opening instead of closing');
		stFault.FaultType		:= E_FaultTypes.CF 					;
		bErrorActive			:= TRUE 								;
	ELSIF q_Open AND fbSensorClosed.bReStatus AND NOT q_close THEN
		stFault.Active			:= TRUE ;
		stFault.MessageNumber	:= E_MessageNumbers.CF_WrongDirection 	;
		stFault.Discription		:= CONCAT( sName,' Cylinder closing instead of opening');
		stFault.FaultType		:= E_FaultTypes.CF 					;
		bErrorActive			:= TRUE 								;
	END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetFeedback" Id="{1ffe37d7-2aa6-4e39-bf13-5b9a981a51d6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED ExecSetFeedback : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
// ====== Call sensor Open function =======
	IF bIcfFbkClosedPresent THEN 
		fbSensorClosed(refFbFault := refFbFault);
		bFco_Closed := fbSensorClosed.bFcoInputActive ;
		bFeClosed 	:= fbSensorClosed.bFeStatus ;
		bReClosed 	:= fbSensorClosed.bReStatus ;
	ELSE 
		fbTOnClose	(IN 	:= q_Close, PT 	:= LREAL_TO_TIME(stParTimeToClose.fValue))	;
		bFco_Closed := fbTOnClose.Q ;
	END_IF

// ====== Call sensor Close function =======
	IF bIcfFbkOpenPresent THEN 
		fbSensorOpen(refFbFault := refFbFault) 	;
		bFco_open 	:= fbSensorOpen.bFcoInputActive ;
		bFeOpen		:= fbSensorOpen.bFeStatus;
		bReOpen		:= fbSensorOpen.bReStatus;
	ELSE 
		FbTOnOpen	(IN 	:= q_Open, PT 	:= LREAL_TO_TIME(stParTimeToOpen.fValue))	;
		bFco_Open := FbTOnOpen.Q ;
	END_IF

{warning restore C0371}
// ====== set outputs =======
	bReady		:= bFco_Closed OR bFco_Open ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecTimeout" Id="{4c13fd3f-2cd5-4918-a271-53ad554a49b6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecTimeout : BOOL
VAR_INPUT
END_VAR
VAR
	nTimePassedMs : LREAL ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bFcoCalcDone AND bIcfTimeChecked AND bEnable THEN 
// ====== Set triggers ======
	IF q_Close  AND bFco_Open THEN 
		bTriggerTimeClose := TRUE ;
	ELSIF q_Open OR bFco_Closed  THEN 
		bTriggerTimeClose := FALSE ;
	END_IF

	IF q_Open  AND bFco_Closed THEN 
		bTriggerTimeOpen := TRUE ;
	ELSIF q_Close OR bFco_Open THEN
		bTriggerTimeOpen := FALSE ;
	END_IF
ELSE
	bTriggerTimeClose 	:= FALSE ;
	bTriggerTimeOpen	:= FALSE ;
END_IF


//======= run timers =======
	IF bIcfFbkClosedPresent THEN 
		fbTimerClose(IN := q_Close AND bEnable, PT := T#1M);
	END_IF	
	
	IF bIcfFbkOpenPresent THEN 
		fbTimerOpen	(IN := q_Open AND bEnable , PT := T#1M);
	END_IF

//====== Run timeout checks for cylinder close =======
	nTimePassedMs:= TIME_TO_LREAL(fbTimerClose.ET);
	
	IF bIcfFbkClosedPresent THEN 
		IF bTriggerTimeClose THEN 
			IF fbSensorClosed.bReStatus THEN 
				IF nTimePassedMs < stTimesClose.Minimal THEN 
					// send message to HMI 
					stFault.Active			:= TRUE 							;
					stFault.MessageNumber	:= E_MessageNumbers.CF_MoveToFast 	;
					stFault.Discription		:= CONCAT( sName, ' Cylinder closing to fast' )	;
					stFault.FaultType		:= E_FaultTypes.CF 					;
					bErrorActive			:= TRUE 							;
					bReCloseFast			:= TRUE                             ;
				END_IF
			ELSIF	nTimePassedMs > stTimesClose.Maximum  THEN
				// send message to HMI 
				stFault.Active			:= TRUE ;
				stFault.MessageNumber	:= E_MessageNumbers.CF_MoveToSlow		;
				stFault.Discription		:= CONCAT( sName,' Cylinder closing to Slow')	;
				stFault.FaultType		:= E_FaultTypes.CF 						;
				bErrorActive			:= TRUE 								;
				bReCloseSlow			:= TRUE                             	;
			END_IF
		END_IF
	END_IF	

//====== Run timeout checks for cylinder Open =======
	nTimePassedMs:= TIME_TO_REAL(fbTimerOpen.ET);

	IF bIcfFbkOpenPresent THEN 
		IF bTriggerTimeOpen THEN 
			IF fbSensorOpen.bReStatus THEN 
				IF nTimePassedMs < stTimesOpen.Minimal THEN 
					// send message to HMI 
					stFault.Active			:= TRUE ;
					stFault.MessageNumber	:= E_MessageNumbers.CF_MoveToFast 	;
					stFault.Discription		:= CONCAT( sName,' Cylinder Opening to fast')		;
					stFault.FaultType		:= E_FaultTypes.CF 					;
					bErrorActive			:= TRUE 							;
					bReOpenFast 			:= TRUE 							;
				END_IF
			ELSIF	nTimePassedMs > stTimesOpen.Maximum  THEN
				// send message to HMI 
				stFault.Active			:= TRUE ;
				stFault.MessageNumber	:= E_MessageNumbers.CF_MoveToSlow 	;
				stFault.Discription		:= CONCAT( sName,' Cylinder Opening to Slow')		;
				stFault.FaultType		:= E_FaultTypes.CF 					;
				bErrorActive			:= TRUE 							;
				bReOpenSlow 			:= TRUE 							;
			END_IF
		END_IF
	END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{db3610d9-73cc-44d4-8df3-a5e2149be4ab}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
	// Message location data
	nId			: UDINT ; // Identification number of object
	nParentId	: UDINT ; // Id of higher level If aplicable (0 = no parent)
	// Command state
	eResetState		: E_ValveResetState := 0		; // Cylinder reset state variable (default is idle) 
	eSafeState		: E_ValveResetState	:= 0		; // Valve safe state
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bFcoCalcDone := FALSE;

// Enable sensor feedback
fbSensorClosed.bEmbeded := TRUE ;
fbSensorClosed.bEnable	:= TRUE ;
fbSensorClosed.Init	(	nId 		:= 0,
						nParentId 	:= nLocationId) ;

fbSensorOpen.bEmbeded := TRUE ;
fbSensorOpen.bEnable	:= TRUE ;
fbSensorOpen.Init	(	nId 		:= 1,
						nParentId 	:= nLocationId) ;

// Call feedback sensors 
ExecSetFeedback(); 

SUPER^.Init(nId, nParentId, eResetState, eSafeState);

// ===== Set device type for manual control =====
eDevType := E_Devices.Cylinder ;

bInitOk := fbSensorClosed.bInitOk 	AND bInitOk ;
bInitOk := fbSensorOpen.bInitOk		AND bInitOk ;
Init 	:= bInitOk ;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>